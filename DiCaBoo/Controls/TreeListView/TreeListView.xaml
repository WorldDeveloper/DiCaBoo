<UserControl x:Class="DiCaBoo.TreeList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:DiCaBoo"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <!--Converter for Indentation of items-->
        <local:TreeListViewConverter x:Key="TreeListViewConverter"/>

        <!--Control Template for TreeViewItem's.-->
        <ControlTemplate TargetType="TreeViewItem" x:Key="TreeListViewItem">
            <!--Grid containing the current information and the subnodes.-->
            <StackPanel>
                <!--Border wrapping the content presenter.-->
                <Border x:Name="Border">
                    <!--GridViewRowPrsenter containing the current information.-->
                    <GridViewRowPresenter Content="{TemplateBinding Header}"
                    Columns="{Binding Columns, 
                    RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=local:TreeListView}}"/>
                </Border>
                <!--ItemsPresenter containing the subnodes-->
                <ItemsPresenter x:Name="ItemsPresenter" Visibility="Collapsed"/>
            </StackPanel>
            <ControlTemplate.Triggers>
                <!--Trigger used to show the sub items-->
                <Trigger Property="IsExpanded" Value="True">
                    <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible"/>
                </Trigger>
                <!--Trigger used to change the color based on selection-->
                <Trigger Property="IsSelected" Value="true">
                    <!--Change the background color-->
                    <!--<Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
                    <Setter TargetName="Border" Property="Background" Value="Beige" />
                    <!--Change the foreground color-->
                    <!--<Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
                </Trigger>
                <!--Trigger used to change the color based on selection-->
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <!--Change the background color-->
                    <Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                    <!--Change the foreground color-->
                    <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </MultiTrigger>
                <!--Trigger used to change the color based on the status of the item-->
                <Trigger Property="IsEnabled" Value="false">
                    <!--Change the foreground color-->
                    <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--Control Template for TreeListViewExpander's.-->
        <ControlTemplate TargetType="{x:Type local:TreeListViewExpander}" x:Key="TreeListViewExpander">
            <StackPanel Orientation="Horizontal" x:Name="ContainerElement">
                <!--Use a FrameworkElement to indent the button-->
                <FrameworkElement Width="{Binding RelativeSource={x:Static RelativeSource.Self}, 
                Converter={StaticResource TreeListViewConverter}}"/>
                <!--Use a standard toggle button-->
                <ToggleButton IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" Width="9" Height="9" VerticalAlignment="Center" Margin="1"/>
            </StackPanel>
            <ControlTemplate.Triggers>
                <!--Trigger used to show/hide the expand button-->
                <DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" Value="False">
                    <Setter TargetName="ContainerElement" Property="Visibility" Value="Hidden"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--Apply this style to all controls of type 'TreeListView'.-->
        <Style TargetType="{x:Type local:TreeListView}">
            <!--Set the control template.-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:TreeListView}">
                        <ControlTemplate.Resources>
                            <!--Apply this style to all 'TreeViewItem's.-->
                            <Style TargetType="TreeViewItem">
                                <Setter Property="Template" Value="{StaticResource TreeListViewItem}"/>
                            </Style>
                            <!--Apply this style to all 'TreeListViewExpander's.-->
                            <Style TargetType="local:TreeListViewExpander">
                                <Setter Property="Template" Value="{StaticResource TreeListViewExpander}"/>
                            </Style>
                        </ControlTemplate.Resources>
                        <!--Create a standard border around the 'TreeListView'.-->
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <!--ScrollViewer providing horizontal scrolling functionality 
                        for both, content and headers.-->
                            <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled">
                                <!--Grid containing the header row and all the content rows.-->
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <!--The header row.-->
                                        <RowDefinition Height="Auto"/>
                                        <!--The content row.-->
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <!--The header row.-->
                                    <GridViewHeaderRowPresenter Columns="{TemplateBinding Columns}"
                                    AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}"/>
                                    <!--ScrollViewer providing vertical scrolling
                                functionality for the content.-->
                                    <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto"
                                              Grid.Row="1">
                                        <!--ItemsPresenter containg the content.-->
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <local:TreeListView x:Name="Tree" AllowsColumnReorder="True">
        <!--Create an item template to specify the ItemsSource-->
        <local:TreeListView.ItemTemplate>
            <HierarchicalDataTemplate ItemsSource="{Binding ChildAccounts}" />
        </local:TreeListView.ItemTemplate>
        <local:TreeListView.Columns>
            <!--Create the first column containing the expand button and the type name.-->
            <GridViewColumn Header="Account" Width="200">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <!--The Expander Button (can be used in any column (typically the first one))-->
                            <local:TreeListViewExpander/>
                            <!--Display the name of the DataElement-->
                            <TextBlock Text="{Binding RootAccount.AccountName}"/>
                        </StackPanel>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <!--Create a second column containing the number of children.-->
            <GridViewColumn Header="Balance" Width="100">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <!--Display the size of the DataElement-->
                        <TextBlock Text="{Binding RootAccount.Balance, StringFormat=N2}" HorizontalAlignment="Right"/>
                        <!--<TextBox Text="{Binding Value, StringFormat={}{0:#,#.00}}" />-->
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <!--Create a third column containing the brush of the material.-->

        </local:TreeListView.Columns>

    </local:TreeListView>
</UserControl>
